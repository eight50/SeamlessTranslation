@startuml

package Domain {

    together {
        class TranslationEntity {
            - originalText
            - translatedText
            - fromLang
            - toLang
        }

        enum Lang {
            - EN
            - JP
        }
    }

    together {
        class TranslationUseCase {

        }

        class RecordUseCase {
            - startRecording()
            - stopRecording()
        }

        class VoiceToTextUseCase {

        }
    }

    together {
        interface TranslationRepository {
            - translate()
            - storeTextData()
        }

        interface RecordRepository {
            - startRecording()
            - stopRecording()
            - storeVoiceData()
        }

        interface VoiceToTextRepository {
            - convertVoiceToText()

        }

        interface VoiceInput {
            - Service使うから必要ないかも
            - RecordUseCaseがRecordRepositoryに録音を依頼。
            - 実際にはデータ層で録音し、保存
        }

    }

    class TranslationOutputPort {
        - originalText
        - translatedText
    }



    TranslationEntity --right> Lang
    TranslationUseCase --up> TranslationEntity
    TranslationUseCase --> TranslationRepository
    TranslationUseCase --> TranslationOutputPort
    RecordUseCase --up> TranslationEntity
    RecordUseCase --> RecordRepository
    RecordUseCase ---|> VoiceInput
    VoiceToTextUseCase --up> TranslationEntity
    VoiceToTextUseCase --> VoiceToTextRepository

    note right of TranslationEntity : 不変のルール、データ
}


package RecordController {
    class RecordController {
        - Service経由で録音するから必要ないかも
    }

    RecordController ---> VoiceInput

}


package Presentation {
    class View {
        - ViewModel
        - update()
        - show()
        - onCreate()
    }

    class ViewModel {
        - uiState
        - originalText
        - translatedText
        - getData()
    }

    class AppWidgetReceiver {

    }

    View --> ViewModel
    ViewModel ---> TranslationOutputPort
    note right of View : Main Activity
}


package Data {
    class TranslationRepoImpl {
        - recordedVoice
        - voiceText
        - translatedText
        - storeTextData()
    }

    class RecordRepoImpl {
        - voiceData
        - startRecording()
        - stopRecording()
        - storeVoiceData()
    }

    class VoiceToTextRepoImpl {
        - convertVoiceToText()
    }

    struct ApiConfig {
        - apiKey
        - url
    }

    struct InputVoiceData {
        - filePath
    }

    struct VoiceToTextData {
        - string
    }


    package DataSource {

        class RemoteDataSource {
            - translate(apiKey, originalText)
        }
    }

    TranslationRepoImpl ..|> TranslationRepository
    RecordRepoImpl ..|> RecordRepository
    RecordRepoImpl --> InputVoiceData
    RemoteDataSource --> TranslationRepoImpl
    RemoteDataSource --> ApiConfig
    VoiceToTextRepoImpl ..|> VoiceToTextRepository
    VoiceToTextRepoImpl --> VoiceToTextData

}

package Service {
    class RecordService {
        - startForeground()
    }

    class RecordServiceReceiver {
        - 通知からのIntentを受け取る
    }

    RecordServiceReceiver --> RecordService
    RecordService --> RecordUseCase
}

package Widget {
    package UI {
        class AppWidget {
            - actionStartService(RecordService)
        }
    }

    package Receiver {
        class AppWidgetReceiver
    }

    Receiver.AppWidgetReceiver --> UI.AppWidget
    AppWidget --> Service.RecordService
}











@enduml